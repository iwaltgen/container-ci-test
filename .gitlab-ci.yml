# https://anchore.freshdesk.com/support/solutions/articles/36000058199-gitlab-integration
stages:
  - build
  - scan
  - publish

variables:
  CI_REGISTRY_IMAGE_BRANCH: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  # CI_REGISTRY_IMAGE_BUILD: ${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}
  CI_REGISTRY_IMAGE_BUILD: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}


## build
container_build:
  stage: build
  image: docker:stable
  services:
    - docker:stable-dind

  variables:
    DOCKER_DRIVER: overlay2

  script:
    - docker login -u $CI_REGISTRY_USERNAME -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "${CI_REGISTRY_IMAGE_BRANCH}" || true
    - docker build --cache-from "${CI_REGISTRY_IMAGE_BRANCH}" -t $CI_REGISTRY_IMAGE_BUILD .
    - docker push $CI_REGISTRY_IMAGE_BUILD


## scan
container_scan:
  stage: scan
  include:
    template: Container-Scanning.gitlab-ci.yml


## publish
container_publish:
  stage: publish
  image: docker:stable
  services:
    - docker:stable-dind

  variables:
    DOCKER_DRIVER: overlay2
    GIT_STRATEGY: none

  script:
    - docker login -u $CI_REGISTRY_USERNAME -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull "$CI_REGISTRY_IMAGE_BUILD"
    - docker tag "$CI_REGISTRY_IMAGE_BUILD" "CI_REGISTRY_IMAGE_BRANCH"
    - docker push "CI_REGISTRY_IMAGE_BRANCH"
    - |
        if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
          docker tag "$CI_REGISTRY_IMAGE_BUILD" "${CI_REGISTRY_IMAGE}:latest"
          docker push "${CI_REGISTRY_IMAGE}:latest"
        fi


# ## scan
# container_scan:
#   stage: scan
#   image:
#     name: anchore/anchore-engine:v0.3.0
#     entrypoint: [""]
#   services:
#     - name: anchore/engine-db-preload:v0.3.0
#       alias: anchore-db

#   variables:
#     GIT_STRATEGY: none
#     ANCHORE_FAIL_ON_POLICY: "false"
#     ANCHORE_TIMEOUT: 500

#   script:
#     - |
#         curl -o /tmp/anchore_ci_tools.py https://raw.githubusercontent.com/anchore/ci-tools/v0.3.0/scripts/anchore_ci_tools.py
#         chmod +x /tmp/anchore_ci_tools.py
#         ln -s /tmp/anchore_ci_tools.py /usr/local/bin/anchore_ci_tools
#     - anchore_ci_tools --setup
#     - anchore-cli --u $ANCHORE_USERNAME --p $ANCHORE_PASSWORD registry add $CI_REGISTRY $CI_REGISTRY_USERNAME $CI_REGISTRY_PASSWORD --skip-validate
#     - anchore_ci_tools --analyze --report --image "$CI_REGISTRY_IMAGE_BUILD" --timeout "$ANCHORE_TIMEOUT"
#     - |
#         if [ "$ANCHORE_FAIL_ON_POLICY" == "true" ]; then
#           anchore-cli evaluate check "$CI_REGISTRY_IMAGE_BUILD"
#         else
#           set +o pipefail
#           anchore-cli evaluate check "$CI_REGISTRY_IMAGE_BUILD" | tee /dev/null
#         fi

#   artifacts:
#     name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}
#     paths:
#     - anchore-reports/*


# ## publish
# anchore_reports:
#   stage: publish
#   image: alpine:latest
#   dependencies:
#     - container_scan

#   variables:
#     GIT_STRATEGY: none

#   script:
#     - apk add jq
#     - |
#         echo "Parsing anchore reports."
#         printf "\n%s\n" "The following OS packages are installed on ${CI_REGISTRY_IMAGE_BUILD}:"
#         jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/image-content-os-report.json || true
#         printf "\n%s\n" "The following vulnerabilites were found on ${CI_REGISTRY_IMAGE_BUILD}:"
#         jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/image-vuln-report.json || true

# container_publish:
#   stage: publish
#   image: docker:stable
#   services:
#     - docker:stable-dind

#   variables:
#     DOCKER_DRIVER: overlay2
#     GIT_STRATEGY: none

#   script:
#     - docker login -u $CI_REGISTRY_USERNAME -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker pull "$CI_REGISTRY_IMAGE_BUILD"
#     - docker tag "$CI_REGISTRY_IMAGE_BUILD" "CI_REGISTRY_IMAGE_BRANCH"
#     - docker push "CI_REGISTRY_IMAGE_BRANCH"
#     - |
#         if [ "$CI_COMMIT_REF_NAME" == "master" ]; then
#           docker tag "$CI_REGISTRY_IMAGE_BUILD" "${CI_REGISTRY_IMAGE}:latest"
#           docker push "${CI_REGISTRY_IMAGE}:latest"
#         fi
